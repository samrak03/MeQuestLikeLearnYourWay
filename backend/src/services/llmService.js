// /mnt/d/MeQuest/Backend/src/services/llmService.js

import axios from "axios";
import dotenv from 'dotenv';
import { searchByText } from "../services/EmbeddigService.js";
import { mysqlConn } from "../config/db.mysql.js";


dotenv.config();

const GECKO_LLM_URL = process.env.GECKO_LLM_URL || "http://localhost:8001/generate";
const SOLAR_LLM_URL = process.env.SOLAR_LLM_URL || "http://localhost:8002/summarize";
const EXAONE_LLM_URL = process.env.EXAONE_LLM_URL || "http://localhost:8003/feedback";


// GECKO Ìò∏Ï∂ú
export async function callGecko(topic) {
  try {
    const response = await axios.post(GECKO_LLM_URL, {
      topic,
      max_new_tokens: 256,
      temperature: 0.8,
      top_p: 0.9,
      repetition_penalty: 1.2,
    });

    return response.data;
  } catch (error) {
    console.error("‚ùå GECKO API Ìò∏Ï∂ú Ïã§Ìå®:", error.message);
    throw error;
  }
}

// SOLAR Ìò∏Ï∂ú
export async function callSolar(document) {
  try {
    const payload = { document }; // <-- text ‚Üí document
    const { data } = await axios.post(SOLAR_LLM_URL, payload); // ‚úÖ Ï†ÑÏó≠ Î≥ÄÏàò ÏÇ¨Ïö©
    return data;
  } catch (error) {
    console.error("‚ùå SOLAR Ìò∏Ï∂ú Ïã§Ìå®:", error.message);
    throw error;
  }
}

// EXAONE Ìò∏Ï∂ú
export async function callExaone(question, userAnswer, correctAnswer) {
  try {
    const response = await axios.post(`${EXAONE_LLM_URL}`, {
      question,
      user_answer: userAnswer,
      correct_answer: correctAnswer,
    });
    return response.data;
  } catch (error) {
    console.error("‚ùå EXAONE API Ìò∏Ï∂ú Ïã§Ìå®:", error.message);
    throw error;
  }
}


function buildPrompt(topic, contexts) {
  const contextBlock = contexts
    .map(
      (c, i) =>
        `# CONTEXT ${i + 1}\n${c.content.trim()}\n(Í±∞Î¶¨:${c.distance?.toFixed?.(4) ?? "NA"})`
    )
    .join("\n\n");

  return [
    `ÎãπÏã†ÏùÄ ÍµêÍ≥º Í∏∞Î∞ò Î¨∏Ï†ú ÏÉùÏÑ±Í∏∞ÏûÖÎãàÎã§.`,
    `Ï£ºÏ†ú: ${topic}`,
    `ÏïÑÎûò Ïª®ÌÖçÏä§Ìä∏Î•º Í∑ºÍ±∞Î°ú Ï†ïÌôïÌïú Î¨∏Ï†ú 1Í∞úÎ•º ÏÉùÏÑ±ÌïòÏÑ∏Ïöî.`,
    `- Î≥¥Í∏∞ÎÇò ÏàòÏπòÍ∞Ä ÌïÑÏöîÌïòÎ©¥ Ïª®ÌÖçÏä§Ìä∏Î•º Ïö∞ÏÑ† ÏÇ¨Ïö©`,
    `- Ï†ïÎãµÎèÑ Ìï®Íªò ÏÉùÏÑ±`,
    `- Ìè¨Îß∑:`,
    `QUESTION: ...`,
    `ANSWER: ...`,
    ``,
    `===== KNOWLEDGE CONTEXT =====`,
    contextBlock || "(no retrieved context)",
  ].join("\n");
}

export async function callGeckoRAG({ topic, topK = 5, filter = { source: "problem" } }) {
  if (!GECKO_LLM_URL) throw new Error("GECKO_LLM_URL is not set");

  // 1) Í≤ÄÏÉâ (ÌÜ†ÌîΩ Í∏∞Î∞ò)
  const hits = await searchByText(topic, topK, filter);

  // 2) ÌîÑÎ°¨ÌîÑÌä∏ Íµ¨ÏÑ±
  const prompt = buildPrompt(topic, hits);

  // 3) GECKO Ìò∏Ï∂ú
  const payload = {
    topic: prompt, // üí° 'input' ÎåÄÏã† 'prompt' ÌÇ§Î•º ÏÇ¨Ïö©Ìï©ÎãàÎã§.
    // GECKO FastAPIÍ∞Ä Í∞úÎ≥Ñ LLM ÏÑ§Ï†ïÏùÑ Î∞õÎèÑÎ°ù payloadÏóê Ìè¨Ìï®
    max_new_tokens: 256, 
    temperature: 0.8,
    top_p: 0.9,
    repetition_penalty: 1.2,
  };

  const { data } = await axios.post(
   `${GECKO_LLM_URL}`,
   payload, // üí° ÏàòÏ†ïÎêú payload ÏÇ¨Ïö©
   { timeout: 60_000 }
  );

  // 4) MySQL Ï†ÄÏû• (problems/ logs)
  //   - GECKOÍ∞Ä ‚ÄúQUESTION:‚Ä¶ / ANSWER: ‚Ä¶‚Äù Îëê Ï§ÑÏùÑ Î∞òÌôòÌïúÎã§Í≥† Í∞ÄÏ†ï
  const text = String(data?.result ?? "");
  const q = text.split("ANSWER:")[0].replace(/^QUESTION:\s*/i, "").trim();
  const a = text.split("ANSWER:")[1]?.trim() ?? "";

  // ÏµúÏÜå Î∞©Ïñ¥
  const question_text = q || topic;
  const answer_text = a || "";

  // INSERT problems
  const [res] = await mysqlConn.execute(
    `INSERT INTO problems (user_id, topic, question_text, answer_text, level)
     VALUES (?, ?, ?, ?, ?)`,
    [1, topic, question_text, answer_text, 1]
  );
  const problemId = res.insertId;

  // INSERT logs (activity_type='generate', model_name='GECKO')
  await mysqlConn.execute(
    `INSERT INTO logs (user_id, problem_id, activity_type, is_correct, feedback, details, model_name)
     VALUES (?, ?, ?, ?, ?, ?, ?)`,
    [
      1,
      problemId,
      "generate",
      null,
      null,
      JSON.stringify({ topic, retrieved: hits.map(h => ({ id: h.id, ref_id: h.ref_id, distance: h.distance })) }),
      "GECKO",
    ]
  );

  return { problemId, question_text, answer_text, raw: data };
}